{
  "F:archive.lua",
  "\"tArgs = {...}\\\
local FFormat = \\\".arch\\\"\\\
local nFile, nDir, size = 0, 0\\\
if #tArgs < 3 then\\\
print(\\\"Usage:\\\"\\\
..\\\"\\\\nTo zip folder and its files and subfolders use\\\"\\\
..\\\"\\\\narchive zip... \\\"\\\
..\\\"\\\\nIn you able to set folders that will be skipped, for example \\\\\\\"rom\\\\\\\" \\\"\\\
..\\\"\\\\n\\\\nTo unzip zipped archive to selected folder use\\\"\\\
..\\\"\\\\narchive unzip\\\"\\\
..\\\"\\\\n\\\\nThis app is useful with pastebin.\\\\nProgrammed by 1Ridav\\\")\\\
end\\\
\\\
local function fopen(path, mode)\\\
local f = fs.open(path, mode)\\\
if not f then\\\
print(\\\"ERROR: Could not open \\\"..path..\\\" with mode \\\\\\\"\\\"..mode..\\\"\\\\\\\"\\\")\\\
exit()\\\
end\\\
return f\\\
end\\\
\\\
local function skip(df)\\\
for i = 3, #tArgs do\\\
if tArgs[i] == fs.getName(df) then\\\
return true\\\
end\\\
end\\\
return false\\\
end\\\
\\\
local function zip(file)\\\
print(\\\"zipping: \\\".. file)\\\
local f = fopen(file, \\\"r\\\")\\\
local z = textutils.serialize(f.readAll())\\\
f.close()\\\
return z\\\
end\\\
\\\
local function ZIP(path)\\\
local list = fs.list(path)\\\
local array = {}\\\
local t, name, d = 0, \\\"\\\", 0\\\
\\\
for i = 2, #list * 2, 2 do\\\
t = i/2\\\
local tpath = path..\\\"/\\\"..list[t]\\\
if fs.isDir(tpath) then\\\
if not skip(tpath) then\\\
name = \\\"D:\\\"..list[t]\\\
array[i] = ZIP(tpath)\\\
nDir = nDir + 1\\\
end\\\
else\\\
name = \\\"F:\\\"..list[t]\\\
array[i] = zip(tpath)\\\
nFile = nFile + 1\\\
end\\\
array[i - 1] = name\\\
end\\\
\\\
return textutils.serialize(array)\\\
end\\\
\\\
local function unzip(text, path)\\\
print(\\\"unzipping: \\\"..path)\\\
local f = fopen(path, \\\"w\\\")\\\
f.write(textutils.unserialize(text))\\\
f.close()\\\
end\\\
\\\
local function UNZIP(text, path)\\\
local array = textutils.unserialize(text)\\\
local unz, dp\\\
local d = 0\\\
for i = 2, #array, 2 do\\\
if string.sub(array[i-1], 1, 1) == \\\"D\\\" then\\\
dp = string.sub(array[i-1], 3, #array[i-1])\\\
fs.makeDir(path..\\\"/\\\"..dp)\\\
UNZIP(array[i], path..\\\"/\\\"..dp)\\\
nDir = nDir + 1\\\
elseif string.sub(array[i-1], 1, 1) == \\\"F\\\" then\\\
local p = string.sub(array[i-1], 3, #array[i-1])\\\
unzip(array[i], path..\\\"/\\\"..p)\\\
nFile = nFile + 1\\\
end\\\
end\\\
end\\\
\\\
local function result()\\\
print(\\\"\\\\nDone\\\"\\\
,\\\"\\\\n   size: \\\"\\\
,size, \\\" B   \\\"\\\
,math.floor(size/1024), \\\" KB\\\"\\\
,\\\"\\\\n   Files:   \\\", nFile\\\
,\\\"\\\\n   Folders: \\\", nDir\\\
)\\\
end\\\
\\\
if tArgs[1] == \\\"zip\\\" then\\\
if fs.exists(tArgs[2]) and fs.isDir(tArgs[2]) then\\\
local zipped = ZIP(shell.resolve(tArgs[2]))\\\
local f = fs.open(tArgs[3]..FFormat, \\\"w\\\")\\\
f.write(zipped)\\\
f.close()\\\
zipped = nil\\\
size = fs.getSize(tArgs[3]..FFormat)\\\
result()\\\
end\\\
\\\
elseif tArgs[1] == \\\"unzip\\\" then\\\
local f = fopen(tArgs[2], \\\"r\\\")\\\
if not fs.exists(tArgs[3]) then\\\
fs.makeDir(tArgs[3])\\\
end\\\
UNZIP(f.readAll(), tArgs[3])\\\
size = fs.getSize(tArgs[2])\\\
result()\\\
end\"",
  "D:boot",
  "{\
  \"D:kernel\",\
  \"{\\\
  \\\"F:kernel.lua\\\",\\\
  \\\"\\\\\\\"-- kernel!\\\\\\\\\\\\\\\
-- blueos 0.0.1\\\\\\\\\\\\\\\
-- TheDiman\\\\\\\\\\\\\\\
require \\\\\\\\\\\\\\\"/lib/logger\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\
log(\\\\\\\\\\\\\\\"Kernel has inited\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\
log('Host: '.. _HOST)\\\\\\\\\\\\\\\
log('BlueOS: v0.0.1')\\\\\\\\\\\\\\\
log('Starting InitSystem')\\\\\\\\\\\\\\\
require('/usr/bin/isystem')\\\\\\\\\\\\\\\
StartInitSystem()\\\\\\\"\\\",\\\
}\",\
}",
  "D:etc",
  "{\
  \"F:config.json\",\
  \"\\\"{\\\\\\\
	\\\\\\\"startscreen\\\\\\\":true\\\\\\\
}\\\"\",\
  \"F:motd\",\
  \"\\\"Hi, welcome to BlueOS v0.0.1 \\\\\\\
This is beta!\\\"\",\
  \"F:users.json\",\
  \"\\\"\\\"\",\
}",
  "F:install.lua",
  "\"if not http then \\\
	print(\\\"Enable HTTP-API to continue\\\")\\\
	print(\\\"Installation cannot continue\\\")\\\
	return\\\
end\\\
setup = http.get('https://raw.githubusercontent.com/SuperErnD/BlueOS/main/README.md')\\\
print(setup)\\\
code = setup.readAll()\\\
setup.close()\\\
file=fs.open(\\\"setupp.lua\\\",'w')\\\
file.write(code)\\\
file.close()\"",
  "D:lib",
  "{\
  \"F:json.lua\",\
  \"\\\"------------------------------------------------------------------ utils\\\\\\\
local controls = {[\\\\\\\"\\\\\\\\n\\\\\\\"]=\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\", [\\\\\\\"\\\\\\\\r\\\\\\\"]=\\\\\\\"\\\\\\\\\\\\\\\\r\\\\\\\", [\\\\\\\"\\\\\\\\t\\\\\\\"]=\\\\\\\"\\\\\\\\\\\\\\\\t\\\\\\\", [\\\\\\\"\\\\\\\\b\\\\\\\"]=\\\\\\\"\\\\\\\\\\\\\\\\b\\\\\\\", [\\\\\\\"\\\\\\\\f\\\\\\\"]=\\\\\\\"\\\\\\\\\\\\\\\\f\\\\\\\", [\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\"]=\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\", [\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\"]=\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"}\\\\\\\
 \\\\\\\
local function isArray(t)\\\\\\\
    local max = 0\\\\\\\
    for k,v in pairs(t) do\\\\\\\
        if type(k) ~= \\\\\\\"number\\\\\\\" then\\\\\\\
            return false\\\\\\\
        elseif k > max then\\\\\\\
            max = k\\\\\\\
        end\\\\\\\
    end\\\\\\\
    return max == #t\\\\\\\
end\\\\\\\
 \\\\\\\
local whites = {['\\\\\\\\n']=true; ['\\\\\\\\r']=true; ['\\\\\\\\t']=true; [' ']=true; [',']=true; [':']=true}\\\\\\\
function removeWhite(str)\\\\\\\
    while whites[str:sub(1, 1)] do\\\\\\\
        str = str:sub(2)\\\\\\\
    end\\\\\\\
    return str\\\\\\\
end\\\\\\\
 \\\\\\\
------------------------------------------------------------------ encoding\\\\\\\
 \\\\\\\
local function encodeCommon(val, pretty, tabLevel, tTracking)\\\\\\\
    local str = \\\\\\\"\\\\\\\"\\\\\\\
 \\\\\\\
    -- Tabbing util\\\\\\\
    local function tab(s)\\\\\\\
        str = str .. (\\\\\\\"\\\\\\\\t\\\\\\\"):rep(tabLevel) .. s\\\\\\\
    end\\\\\\\
 \\\\\\\
    local function arrEncoding(val, bracket, closeBracket, iterator, loopFunc)\\\\\\\
        str = str .. bracket\\\\\\\
        if pretty then\\\\\\\
            str = str .. \\\\\\\"\\\\\\\\n\\\\\\\"\\\\\\\
            tabLevel = tabLevel + 1\\\\\\\
        end\\\\\\\
        for k,v in iterator(val) do\\\\\\\
            tab(\\\\\\\"\\\\\\\")\\\\\\\
            loopFunc(k,v)\\\\\\\
            str = str .. \\\\\\\",\\\\\\\"\\\\\\\
            if pretty then str = str .. \\\\\\\"\\\\\\\\n\\\\\\\" end\\\\\\\
        end\\\\\\\
        if pretty then\\\\\\\
            tabLevel = tabLevel - 1\\\\\\\
        end\\\\\\\
        if str:sub(-2) == \\\\\\\",\\\\\\\\n\\\\\\\" then\\\\\\\
            str = str:sub(1, -3) .. \\\\\\\"\\\\\\\\n\\\\\\\"\\\\\\\
        elseif str:sub(-1) == \\\\\\\",\\\\\\\" then\\\\\\\
            str = str:sub(1, -2)\\\\\\\
        end\\\\\\\
        tab(closeBracket)\\\\\\\
    end\\\\\\\
 \\\\\\\
    -- Table encoding\\\\\\\
    if type(val) == \\\\\\\"table\\\\\\\" then\\\\\\\
        assert(not tTracking[val], \\\\\\\"Cannot encode a table holding itself recursively\\\\\\\")\\\\\\\
        tTracking[val] = true\\\\\\\
        if isArray(val) then\\\\\\\
            arrEncoding(val, \\\\\\\"[\\\\\\\", \\\\\\\"]\\\\\\\", ipairs, function(k,v)\\\\\\\
                str = str .. encodeCommon(v, pretty, tabLevel, tTracking)\\\\\\\
            end)\\\\\\\
        else\\\\\\\
            arrEncoding(val, \\\\\\\"{\\\\\\\", \\\\\\\"}\\\\\\\", pairs, function(k,v)\\\\\\\
                assert(type(k) == \\\\\\\"string\\\\\\\", \\\\\\\"JSON object keys must be strings\\\\\\\", 2)\\\\\\\
                str = str .. encodeCommon(k, pretty, tabLevel, tTracking)\\\\\\\
                str = str .. (pretty and \\\\\\\": \\\\\\\" or \\\\\\\":\\\\\\\") .. encodeCommon(v, pretty, tabLevel, tTracking)\\\\\\\
            end)\\\\\\\
        end\\\\\\\
    -- String encoding\\\\\\\
    elseif type(val) == \\\\\\\"string\\\\\\\" then\\\\\\\
        str = '\\\\\\\"' .. val:gsub(\\\\\\\"[%c\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\]\\\\\\\", controls) .. '\\\\\\\"'\\\\\\\
    -- Number encoding\\\\\\\
    elseif type(val) == \\\\\\\"number\\\\\\\" or type(val) == \\\\\\\"boolean\\\\\\\" then\\\\\\\
        str = tostring(val)\\\\\\\
    else\\\\\\\
        error(\\\\\\\"JSON only supports arrays, objects, numbers, booleans, and strings\\\\\\\", 2)\\\\\\\
    end\\\\\\\
    return str\\\\\\\
end\\\\\\\
 \\\\\\\
function encode(val)\\\\\\\
    return encodeCommon(val, false, 0, {})\\\\\\\
end\\\\\\\
 \\\\\\\
function encodePretty(val)\\\\\\\
    return encodeCommon(val, true, 0, {})\\\\\\\
end\\\\\\\
 \\\\\\\
------------------------------------------------------------------ decoding\\\\\\\
 \\\\\\\
local decodeControls = {}\\\\\\\
for k,v in pairs(controls) do\\\\\\\
    decodeControls[v] = k\\\\\\\
end\\\\\\\
 \\\\\\\
function parseBoolean(str)\\\\\\\
    if str:sub(1, 4) == \\\\\\\"true\\\\\\\" then\\\\\\\
        return true, removeWhite(str:sub(5))\\\\\\\
    else\\\\\\\
        return false, removeWhite(str:sub(6))\\\\\\\
    end\\\\\\\
end\\\\\\\
 \\\\\\\
function parseNull(str)\\\\\\\
    return nil, removeWhite(str:sub(5))\\\\\\\
end\\\\\\\
 \\\\\\\
local numChars = {['e']=true; ['E']=true; ['+']=true; ['-']=true; ['.']=true}\\\\\\\
function parseNumber(str)\\\\\\\
    local i = 1\\\\\\\
    while numChars[str:sub(i, i)] or tonumber(str:sub(i, i)) do\\\\\\\
        i = i + 1\\\\\\\
    end\\\\\\\
    local val = tonumber(str:sub(1, i - 1))\\\\\\\
    str = removeWhite(str:sub(i))\\\\\\\
    return val, str\\\\\\\
end\\\\\\\
 \\\\\\\
function parseString(str)\\\\\\\
    str = str:sub(2)\\\\\\\
    local s = \\\\\\\"\\\\\\\"\\\\\\\
    while str:sub(1,1) ~= \\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\" do\\\\\\\
        local next = str:sub(1,1)\\\\\\\
        str = str:sub(2)\\\\\\\
        assert(next ~= \\\\\\\"\\\\\\\\n\\\\\\\", \\\\\\\"Unclosed string\\\\\\\")\\\\\\\
 \\\\\\\
        if next == \\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\" then\\\\\\\
            local escape = str:sub(1,1)\\\\\\\
            str = str:sub(2)\\\\\\\
 \\\\\\\
            next = assert(decodeControls[next..escape], \\\\\\\"Invalid escape character\\\\\\\")\\\\\\\
        end\\\\\\\
 \\\\\\\
        s = s .. next\\\\\\\
    end\\\\\\\
    return s, removeWhite(str:sub(2))\\\\\\\
end\\\\\\\
 \\\\\\\
function parseArray(str)\\\\\\\
    str = removeWhite(str:sub(2))\\\\\\\
 \\\\\\\
    local val = {}\\\\\\\
    local i = 1\\\\\\\
    while str:sub(1, 1) ~= \\\\\\\"]\\\\\\\" do\\\\\\\
        local v = nil\\\\\\\
        v, str = parseValue(str)\\\\\\\
        val[i] = v\\\\\\\
        i = i + 1\\\\\\\
        str = removeWhite(str)\\\\\\\
    end\\\\\\\
    str = removeWhite(str:sub(2))\\\\\\\
    return val, str\\\\\\\
end\\\\\\\
 \\\\\\\
function parseObject(str)\\\\\\\
    str = removeWhite(str:sub(2))\\\\\\\
 \\\\\\\
    local val = {}\\\\\\\
    while str:sub(1, 1) ~= \\\\\\\"}\\\\\\\" do\\\\\\\
        local k, v = nil, nil\\\\\\\
        k, v, str = parseMember(str)\\\\\\\
        val[k] = v\\\\\\\
        str = removeWhite(str)\\\\\\\
    end\\\\\\\
    str = removeWhite(str:sub(2))\\\\\\\
    return val, str\\\\\\\
end\\\\\\\
 \\\\\\\
function parseMember(str)\\\\\\\
    local k = nil\\\\\\\
    k, str = parseValue(str)\\\\\\\
    local val = nil\\\\\\\
    val, str = parseValue(str)\\\\\\\
    return k, val, str\\\\\\\
end\\\\\\\
 \\\\\\\
function parseValue(str)\\\\\\\
    local fchar = str:sub(1, 1)\\\\\\\
    if fchar == \\\\\\\"{\\\\\\\" then\\\\\\\
        return parseObject(str)\\\\\\\
    elseif fchar == \\\\\\\"[\\\\\\\" then\\\\\\\
        return parseArray(str)\\\\\\\
    elseif tonumber(fchar) ~= nil or numChars[fchar] then\\\\\\\
        return parseNumber(str)\\\\\\\
    elseif str:sub(1, 4) == \\\\\\\"true\\\\\\\" or str:sub(1, 5) == \\\\\\\"false\\\\\\\" then\\\\\\\
        return parseBoolean(str)\\\\\\\
    elseif fchar == \\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\" then\\\\\\\
        return parseString(str)\\\\\\\
    elseif str:sub(1, 4) == \\\\\\\"null\\\\\\\" then\\\\\\\
        return parseNull(str)\\\\\\\
    end\\\\\\\
    return nil\\\\\\\
end\\\\\\\
 \\\\\\\
function decode(str)\\\\\\\
    str = removeWhite(str)\\\\\\\
    t = parseValue(str)\\\\\\\
    return t\\\\\\\
end\\\\\\\
 \\\\\\\
function decodeFromFile(path)\\\\\\\
    local file = assert(fs.open(path, \\\\\\\"r\\\\\\\"))\\\\\\\
    local decoded = decode(file.readAll())\\\\\\\
    file.close()\\\\\\\
    return decoded\\\\\\\
end\\\"\",\
  \"F:logger.lua\",\
  \"\\\"-- Logger for BlueOS\\\\\\\
-- Version 0.1\\\\\\\
-- TheDiman\\\\\\\
function log (msg)\\\\\\\
   print(\\\\\\\"[LOG] \\\\\\\".. msg) \\\\\\\
end\\\"\",\
}",
  "D:lib",
  [ 13 ] = "F:setup.lua",
  [ 14 ] = "\"if not http do \\\
	print(\\\"Enable HTTP-API to continue\\\")\\\
	print(\\\"Installation cannot continue\\\")\\\
	return\\\
end\\\
function downloadFile (url,file) \\\
	\\\
end\"",
  [ 15 ] = "F:setupp.lua",
  [ 16 ] = "\"# BlueOS\\\
A OS for CC: Tweaked\\\
\\\
This OS is trying to be like Linux\\\
\\\
She's not perfect, but she's trying, development has started recently\\\
\\\
(15.05.2022)\\\
\\\
And she is still very raw\\\
\\\
**Good luck**\\\
\\\
to install use\\\
`pastebin get code install`\\\
\\\
and run `install`\"",
  [ 17 ] = "F:startup.lua",
  [ 18 ] = "\"term.clear()\\\
term.setCursorPos(1,1)\\\
print(\\\"Welcome to BootS\\\")\\\
\\\
while true do \\\
	print([[\\\
		Select os\\\
		1. - CraftOS\\\
		2. - BlueOS\\\
		]])\\\
	write('>')\\\
	local choice = read()\\\
	\\\
	if (choice == \\\"1\\\") then\\\
		break\\\
	elseif(choice==\\\"2\\\") then\\\
		term.clear()\\\
		term.setCursorPos(1,1)\\\
		shell.execute('/boot/kernel/kernel.lua')\\\
		break\\\
	else\\\
		print('Unkown choice')\\\
	end\\\
end\"",
  [ 19 ] = "D:usr",
  [ 20 ] = "{\
  \"D:bin\",\
  \"{\\\
  \\\"F:ccsh.lua\\\",\\\
  \\\"\\\\\\\"-- ComputerCraft Shell (CCSH)\\\\\\\\\\\\\\\
-- v0.1 \\\\\\\\\\\\\\\
-- TheDiman\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\
require '/lib/logger'\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\
function StartCCSH() \\\\\\\\\\\\\\\
	local motd = fs.open(\\\\\\\\\\\\\\\"/etc/motd\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"r\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\
	print(motd.readAll())\\\\\\\\\\\\\\\
	motd.close()\\\\\\\\\\\\\\\
	print('beta')\\\\\\\\\\\\\\\
end\\\\\\\"\\\",\\\
  \\\"F:isystem.lua\\\",\\\
  \\\"\\\\\\\"-- InitSystem v0.1\\\\\\\\\\\\\\\
-- for BlueOS\\\\\\\\\\\\\\\
-- TheDiman\\\\\\\\\\\\\\\
print(\\\\\\\\\\\\\\\"Initilization... of InitSystem\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\
require \\\\\\\\\\\\\\\"/lib/logger\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\
function StartInitSystem()\\\\\\\\\\\\\\\
	log('InitSystem v0.1')\\\\\\\\\\\\\\\
	log('Daemon has starting...')\\\\\\\\\\\\\\\
end\\\\\\\"\\\",\\\
  \\\"F:startup.lua\\\",\\\
  \\\"\\\\\\\"\\\\\\\"\\\",\\\
}\",\
}",
}